import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
        int adjacencymatrix[][]=new int[V][V];
        for(int i=0;i<E;i++){
            int v1 = s.nextInt();
            int v2 = s.nextInt();
        	int weight = s.nextInt();
            adjacencymatrix[v1][v2] = weight;
            adjacencymatrix[v2][v1] = weight;
        }
        prims(adjacencymatrix);
	}
    private static void prims(int[][] adjacencymatrix){
        int v = adjacencymatrix.length;
        boolean visited[] = new boolean[v];
        int weight[] = new int[v];
        int parent[] = new int[v];
        
        weight[0] = 0;
        parent[0] = -1;
        for(int i=1;i<v;i++){
            weight[i] = Integer.MAX_VALUE;
        }
        for(int i =0 ;i<v;i++){
            //picking vertex with minimum weight
            int minvertex = findminvertex(weight,visited);
            visited[minvertex] = true;
            //explore it's unvisited neightbours
			for(int j=0;j<v;j++){
                if(adjacencymatrix[minvertex][j] != 0 && !visited[j]){
                    if(adjacencymatrix[minvertex][j] < weight[j]){
                        weight[j] = adjacencymatrix[minvertex][j];
                        parent[j] = minvertex;
                    }
                } 
            }
        }
        //printing
        for(int i=1;i<v;i++){
            if(parent[i] < i){
                System.out.println(parent[i] + " " + i + " " + weight[i]);
            }
            else{
                System.out.println(i + " " + parent[i] + " " + weight[i]);
            }
        }
    }
    
    private static int findminvertex(int weight[],boolean visited[]){
        int minvertex =-1;
        for(int i =0;i<weight.length;i++){
            if(!visited[i] && (minvertex == -1 || weight[i] < weight[minvertex])){
                minvertex = i;
            }
        }
        return minvertex;
    } 
}
