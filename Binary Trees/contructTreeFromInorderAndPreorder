public class Solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

	public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
			int[] in){
		
			// Write your code here
			return helper(pre,0,pre.length-1,in,0,in.length-1);
	}
    
    public static BinaryTreeNode<Integer> helper(int pre[],int sip,int eip,int in[],int sin,int ein){
        if(sin > ein){
            return null;
        }
        
        int rootl = pre[sip];
        BinaryTreeNode<Integer> root =new BinaryTreeNode<Integer>(rootl);

        int rootindex=-1;
        for(int i =sin; i<=ein;i++)
        {

            if(in[i]==rootl)
            {
                rootindex=i;
                break;
            }
        }
        
        if(rootindex==-1)
            return null;
        
        int leftins =sin;
        int leftine =rootindex-1;
        int leftpres = sip+1 ;
        int leftpreend = leftine - leftins + leftpres ;
        int rightins = rootindex+1;
        int rightine = ein ;
        int rightpres =  leftpreend+1  ;
        int rightpreend = eip ;
        
        root.left=helper(pre,leftpres,leftpreend,in,leftins,leftine);

        root.right = helper(pre,rightpres,rightpreend,in ,rightins ,rightine);


        return root;
        
    }

}
