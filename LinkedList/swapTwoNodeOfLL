/*
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.setData(data);
		this.next = null;
	}

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}

}
* */
public class Solution {
	public static  LinkedListNode<Integer> swap_nodes(LinkedListNode<Integer> head,int i,int j){
        
        LinkedListNode<Integer> temp = head, prev = null;
        LinkedListNode<Integer> node1=null, node2=null, node1prev=null,node2prev=null;
        
        int pos=0;int c1=0;int c2=0;
        while(temp != null)
        {
            if(pos == i)
            {
                node1prev = prev;
                node1 = temp;
                c1=1;
            }
            else if(pos ==j)
            {
                node2prev = prev;
                node2 =temp;
                c2=1;
            }
            // MY ADVANCEMENT TO THIS CODE IS WHEN WE GOT THE REFERENCE OR ALL 4 VARIABLES NO NEED TO
            // TRAVERSE THE REST OF THE LIST
            // if(c1 == 1 && c2 == 1)
            // {
            //     break;
            // }
            prev = temp;
            temp = temp.next;
            pos++;
        }
        
        if(node1prev != null)
        {
            node1prev.next = node2;
        }
        else
        {
            head = node2;
        }
        
        if(node2prev != null)
        {
            node2prev.next = node1;
        }
        else
        {
            head = node1;
        }
        
        LinkedListNode<Integer> temp1 = node2.next;
        node2.next = node1.next;
        node1.next = temp1;
        
        return head;

        
        
        
//         int m=0;
//         if(i > j)
//         {
//             m=i;
//             i=j;
//             j=m;
//         }
//         if(i == j)
//         {
//             return head;
//         }
        
//         LinkedListNode<Integer> temp = head;
//         LinkedListNode<Integer> p1,p2,c1,c2;p1=null;p2=null;c1=null;c2=null;
        
//         if((head.next).next == null)
//         {
//             temp=head.next;
//             temp.next = head;
//             head.next = null;
//             return temp;
//         }
        
        
        
//         else if(i == 0)
//         {
//             c1=head;p1=c1;int c=0;
//             while(temp != null && c <= j)
//             {
//                 if(c == j-1)
//                 {
//                     p2=temp;
//                 }
//                 if(c == j)
//                 {
//                     c2 = temp;
//                 }
//                 temp=temp.next;
//                 c++;
//             }
            
//             p2.next = p1;
//             p1.next = c2.next;
//             c2.next = c1.next;
//             return c2;
//         }
        
        
//         else if(Math.abs(i-j) == 1)
//         {
//             int c=0;
//             while(temp != null)
//             {
//                 if(c == i)
//                 {
//                     c1 = temp;
//                 }
//                 if(c == j)
//                 {
//                     c2 = temp;
//                 }
//             	if(c == i-1)
//                 {
//                     p1 = temp;
//                 }
//                 temp=temp.next;
//                 c++;
//             }
//             p1.next = c2;
//             c1.next = null;
//             p2=c2.next;
//             c2.next = c1;
//             c1.next = p2;
//             return head;
//         }
        
//         else 
//         {
//             int c=0;
        
//             while(temp != null)
//             {
//                 if(c == i-1)
//                 {
//                     p1=temp;
//                 }
//                 if(c == i)
//                 {
//                     c1=temp;
//                 }
//                 if(c == j-1)
//                 {
//                     p2=temp;
//                 }
//                 if(c == j)
//                 {
//                     c2=temp;
//                 }
//                 c++;
//                 temp=temp.next;
//             }
//             p1.next = c2;
//             p2.next = c1;
//             c1.next = c2.next;
//             c2.next =p2;
//             return head; 
//         }
        
        
	}
}
