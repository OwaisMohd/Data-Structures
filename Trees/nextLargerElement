public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
    
    // MYSOLUTION 
    	public static TreeNode<Integer> findNextLargerNode(TreeNode<Integer> root, int n){

            // Write your code here
            if(root == null){
                return root;
            }
            TreeNode<Integer> ans = null;
            if(root.data > n){
                ans = root;
            }

			for(int i=0;i<root.children.size();i++){
                TreeNode<Integer> temp = findNextLargerNode(root.children.get(i),n);
                if(temp != null){
                    if(ans == null){
                        ans = temp;
                    }
                    if(ans.data > temp.data){
                        ans = temp;
                    }
                }
            }
            return ans;
    }
    
    
    
    
    
    
    
    
    
    //COPIED SOLUTION, ABOVE SOLUTION IS BETTER
	
//     static TreeNode<Integer> ans;
    
// 	public static TreeNode<Integer> findNextLargerNode(TreeNode<Integer> root, int n){
		
// 		// Write your code here
//         ans = null;
        
//         nextLargerElementUtil(root,n);
//         return ans;
//     }
    
//     public static void nextLargerElementUtil(TreeNode<Integer> root, int x) 
//     { 
//         if (root == null) 
//             return; 

//         // if root is less than res but  
//         // greater than x, update res 
//         if (root.data > x)  
//             if ((ans == null || (ans).data > root.data)) 
//                 ans = root;  

//         // Number of children of root 
//         int numChildren = root.children.size(); 

//         // Recur calling for every child 
//         for (int i = 0; i < numChildren; i++) 
//             nextLargerElementUtil(root.children.get(i), x); 
//         return; 
//     } 
}
