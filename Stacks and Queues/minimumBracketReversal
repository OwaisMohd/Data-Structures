import java.util.*;
public class Solution {
	// Function returns -1 if brackets can't be balanced
	public static int countBracketReversals(String input){
		// Write your code here
        int count=0;
        if(input.length()%2 != 0)
        {
            return -1;
        }
        Stack<Character> stack = new Stack<>();
        for(int i=0;i<input.length();i++)
        {
            char x =input.charAt(i);
            if(x == '{')
            {
                stack.push(x);
            }
            else{
                if(stack.isEmpty())
                {
                    stack.push(x);
                }
                else if(!stack.isEmpty() && stack.peek() == '{'){
                    stack.pop();
                }
                else if(!stack.isEmpty() && stack.peek() != '{'){
                    stack.push(x);
                }
            }
        }
        char c1, c2;
        while(!stack.isEmpty())
        {
            c1=stack.pop();
            c2=stack.pop();
            if(c1 == c2)
            {
                count+=1;
            }
            else 
            {
                count+=2;
            }
        }
        return count;
        
        // MY WAY, BUT }}{{ TYPE OF CASES CANNOT BE RESOLVED THROUGH THIS METHOD
        
	// 	int c1=0;
	// int c2=0;
	// for(int i=0;i<input.length();i++)
	// {
	// char x = input.charAt(i);
	// if(x == '{')
	// {
	// c1++;
	// }
	// else{
	// c2++;
	// }
	// }
	// int res = (c1>c2)? c1-c2:c2-c1;
	// if(res%2 == 0)
	// {
	// res/=2;
	// }
	// else
	// {
	// res = -1;
	// }
	// return res;
        
    }    
}
