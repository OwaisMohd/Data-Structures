/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {


    /* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/

    int coef[] = new int[5];
    public void setCoefficient(int degree, int coeff){


        if(degree>=coef.length)
        {
            // System.out.println(deg.length);
            int small[]=new int[degree+1];
            for(int i=0;i<coef.length;i++)
            {
                small[i]=coef[i];
            }
            coef=small;
        }
        coef[degree]+=coeff;


    }

    // Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree.
    public void print(){
        for(int i =0 ; i<coef.length;i++)
        {

            if(coef[i]==0)
                continue;
            System.out.print(coef[i]+"x"+i+"  ");
        }

    }



    // Adds two polynomials and returns a new polynomial which has result
    public Polynomial add(Polynomial p){  

        Polynomial p1 =new Polynomial();

        int t =Math.min(p.coef.length, coef.length);
        for( int i =0 ; i < t  ; i++)
        {
            p1.setCoefficient(i, coef[i]+p.coef[i]);
        }
        for(int i =t ;i<Math.max(p.coef.length, coef.length) ;i++)
        {
            if(t==coef.length)
            {
                p1.setCoefficient(i, p.coef[i]);
            }
            else
            {
                p1.setCoefficient(i, coef[i]);

            }

        }

        return p1;
    }

    // Subtracts two polynomials and returns a new polynomial which has result
    public Polynomial subtract(Polynomial p){
        Polynomial p1 =new Polynomial();
        for(int i =0 ;i< p.coef.length;i++)
        {
            p1.setCoefficient(i, -p.coef[i]);

        }
        Polynomial p2= this.add(p1);
        return p2;
    }
    public Polynomial multiply(Polynomial p){
        //Polynomial p1 =new Polynomial();
        Polynomial p1 = new Polynomial();
        for(int i =1 ; i <coef.length;i++)
        {
            for( int j =1 ;j <p.coef.length;j++)
            {
                // println(p1.coef[i+j]+"  coef isv"+(i+j)+"coef of i and and j is"+coef[i]+"  "+ p.coef[j]);
                p1.setCoefficient( i+j , (coef[i]*p.coef[j]));
                // System.out.println(p1.coef[i+j]+" newv   coef isv"+(i+j));
            }
        }
        return p1;
    }
}
