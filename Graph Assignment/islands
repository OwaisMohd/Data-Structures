import java.util.*;
public class solution {
    
    public int solve(int n,int m,int U[],int V[]) {
        //write your code here
        // n - no. of nodes
        // m - no. of edges
        
        int adjacencymatrix[][]=new int[n][n];
        boolean visited []= new boolean[n];
        for(int i=0;i<m;i++){
            int t1 = U[i]-1;
            int t2 = V[i]-1;
            adjacencymatrix[t1][t2] =1;
            adjacencymatrix[t2][t1]=1;
        }
        int c=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(i,visited,adjacencymatrix);
                c++;
            }
        }
        return c;

    }
    private static void dfs(int start,boolean visited[],int[][] adjacencymatrix){
        visited[start] = true;
        for(int i=0;i<adjacencymatrix.length;i++){
            if(i == start){
                continue;
            }
            if(adjacencymatrix[start][i] == 1 && !visited[i]){
                dfs(i,visited,adjacencymatrix);
            }
        }
    }
}


    
